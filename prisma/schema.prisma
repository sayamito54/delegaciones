// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(TECNICA)
  department    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  delegaciones  Delegacion[]
  solicitudes   Delegacion[] @relation("Solicitante")
  notificaciones Notificacion[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Delegacion {
  id              String            @id @default(cuid())
  titulo          String
  descripcion     String            @db.Text
  fechaInicio     DateTime
  fechaFin        DateTime?
  estado          DelegacionEstado  @default(BORRADOR)
  delegatarioId   String
  delegatario     User              @relation(fields: [delegatarioId], references: [id])
  aprobadoPor     String?
  fechaAprobacion DateTime?
  observaciones   String?           @db.Text
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Campos específicos para solicitudes de delegación
  instancia       String
  solicitadoPor   String
  urgencia        String            @default("Normal")
  actoAdmin       String?
  solicitanteId   String
  solicitante     User              @relation("Solicitante", fields: [solicitanteId], references: [id])
  delegadoPropuesto String?

  documentos      Documento[]
  notificaciones  Notificacion[]
}

model Documento {
  id           String     @id @default(cuid())
  nombre       String
  url          String
  tipo         String
  tamano       Int
  delegacionId String
  delegacion   Delegacion @relation(fields: [delegacionId], references: [id], onDelete: Cascade)
  uploadedAt   DateTime   @default(now())
}

model Notificacion {
  id           String     @id @default(cuid())
  titulo       String
  mensaje      String     @db.Text
  tipo         NotificacionTipo
  leida        Boolean    @default(false)
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  delegacionId String?
  delegacion   Delegacion? @relation(fields: [delegacionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
}

enum UserRole {
  ADMINISTRADOR
  SOLICITANTE
  DIRECTOR
  SECRETARIA
  DELEGATARIO
}

enum DelegacionEstado {
  BORRADOR
  PENDIENTE_APROBACION
  APROBADA
  RECHAZADA
  EN_PROGRESO
  COMPLETADA
  CANCELADA
}

enum NotificacionTipo {
  INFO
  WARNING
  ERROR
  SUCCESS
}
